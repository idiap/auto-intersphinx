# SPDX-FileCopyrightText: Copyright Â© 2022 Idiap Research Institute <contact@idiap.ch>
#
# SPDX-License-Identifier: BSD-3-Clause

[build-system]
requires = ["hatchling", "versioningit"]
build-backend = "hatchling.build"

[project]
name = "auto-intersphinx"
dynamic = ["version"]
requires-python = ">=3.10"
description = "Automatic links direct project dependencies to the intersphinx catalog"
readme = "README.md"
license = "BSD-3-Clause"
authors = [{ name = "Andre Anjos", email = "andre.anjos@idiap.ch" }]
classifiers = [
  "Framework :: Sphinx :: Extension",
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: BSD License",
  "Natural Language :: English",
  "Programming Language :: Python :: 3",
  "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = ["sphinx", "packaging", "requests", "lxml"]

[project.urls]
documentation = "https://auto-intersphinx.readthedocs.io/en/latest/"
homepage = "https://pypi.org/project/auto-intersphinx"
repository = "https://github.com/idiap/auto-intersphinx"
changelog = "https://github.com/idiap/auto-intersphinx/releases"

[project.optional-dependencies]
qa = ["pre-commit"]
doc = [
  "furo",
  "sphinx-autodoc-typehints",
  "sphinx-copybutton",
  "sphinx-inline-tabs",
  "sphinx-argparse",
]
test = ["pytest", "pytest-cov"]

[project.scripts]
auto-intersphinx = "auto_intersphinx.cli:main"

[tool.pixi.project]
channels = ["conda-forge"]
platforms = ["linux-64", "osx-arm64"]

[tool.pixi.system-requirements]
linux = "4.19.0"

[tool.pixi.dependencies]
sphinx = "*"
packaging = "*"
requests = "*"
lxml = "*"

[tool.pixi.feature.self.pypi-dependencies]
auto-intersphinx = { path = ".", editable = true }

[tool.pixi.feature.py311.dependencies]
python = "~=3.11.0"

[tool.pixi.feature.py312.dependencies]
python = "~=3.12.0"

[tool.pixi.feature.qa.dependencies]
pre-commit = "*"
ruff = "*"
reuse = "*"

[tool.pixi.feature.qa.tasks]
qa-install = "pre-commit install"
qa = "pre-commit run --all-files"
qa-ci = "pre-commit run --all-files --show-diff-on-failure --verbose"

[tool.pixi.feature.doc.dependencies]
furo = "*"
sphinx-autodoc-typehints = "*"
sphinx-copybutton = "*"
sphinx-inline-tabs = "*"
sphinx-argparse = "*"

[tool.pixi.feature.doc.tasks]
doc-clean = "rm -rf doc/api && rm -rf html"
doc = "sphinx-build -aEW doc html"
doctest = "sphinx-build -aEb doctest doc html/doctest"

[tool.pixi.feature.test.dependencies]
pytest = "*"
pytest-cov = "*"

[tool.pixi.feature.test.tasks]
test = "pytest -sv tests/"
test-ci = "pytest -sv --cov-report 'html:html/coverage' --cov-report 'xml:coverage.xml' --junitxml 'junit-coverage.xml' --ignore '.profile' tests/"

[tool.pixi.feature.build.dependencies]
hatch = "*"
versioningit = "*"
twine = "*"

[tool.pixi.feature.build.tasks]
build = "hatch build"
check = "twine check dist/*"
upload = "twine upload dist/*"

[tool.pixi.feature.dev.dependencies]
pdbpp = "*"
uv = "*"

[tool.pixi.feature.dev.tasks]
update-catalog = "auto-intersphinx update-catalog -vvv --self -o src/auto_intersphinx/catalog.json"

[tool.pixi.environments]
default = { features = ["qa", "build", "doc", "test", "dev", "py312", "self"] }
qa-ci = { features = ["qa", "py312"] }
build-ci = { features = ["build", "py312"] }
test-ci-alternative = { features = ["test", "py311", "self"] }

[tool.hatch.version]
source = "versioningit"

[tool.versioningit.next-version]
method = "smallest"

[tool.versioningit.format]
# Example formatted version: 1.2.4.dev42+ge174a1f
distance = "{next_version}.dev{distance}+{vcs}{rev}"
# Example formatted version: 1.2.4.dev42+ge174a1f.d20230922
distance-dirty = "{next_version}.dev{distance}+{vcs}{rev}.d{build_date:%Y%m%d}"

[tool.hatch.build.targets.sdist]
include = [
  "src/**/*.py",
  "src/**/*.json",
  "tests/**/*.py",
  "tests/**/*.json",
  "tests/**/*.txt",
  "doc/**/*.rst",
  "doc/**/*.py",
  "LICENSES/*.txt",
]

[tool.hatch.build.targets.wheel]
packages = ["src/auto_intersphinx"]

[tool.isort]
profile = "black"
line_length = 88
order_by_type = true
lines_between_types = 1

[tool.black]
line-length = 88

[tool.coverage.run]
relative_files = true

[tool.pytest.ini_options]
addopts = [
  "--cov=auto_intersphinx",
  "--cov-report=term-missing",
  "--import-mode=append",
]
junit_logging = "all"
junit_log_passing_tests = false
